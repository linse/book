#use "topfind";;
#thread;;
#require "core";;
#require "ppx_jane";;
[@@@part "1"];;
open Base;;
let assoc = [("one", 1); ("two",2); ("three",3)] ;;
[%%expect ocaml {|val assoc : (string * int) list = [("one", 1); ("two", 2); ("three", 3)]|}];;
List.Assoc.find ~equal:String.equal assoc "two" ;;
[%%expect ocaml {|- : int option = Some 2|}];;
List.Assoc.add ~equal:String.equal assoc "four" 4 (* add a new key *) ;;
[%%expect ocaml {|
- : (string, int) Base__List.Assoc.t =
[("four", 4); ("one", 1); ("two", 2); ("three", 3)]
|}];;
List.Assoc.add ~equal:String.equal assoc "two"  4 (* overwrite an existing key *) ;;
[%%expect ocaml {|- : (string, int) Base__List.Assoc.t = [("two", 4); ("one", 1); ("three", 3)]|}];;
