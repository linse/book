#use "topfind";;
#thread;;
#require "core";;
#require "ppx_jane";;
[@@@part "0.5"];;
open Base;;
module M = struct let foo = 3 end;;
[%%expect ocaml {|module M : sig val foo : int end|}];;
foo;;
[%%expect{|
Characters 0-3:
Error: Unbound value foo
|}];;
open M;;
foo;;
[%%expect ocaml {|- : int = 3|}];;
[@@@part "1"];;
let average x y =
  let open Int64 in
  x + y / of_int 2;;
[%%expect ocaml {|val average : int64 -> int64 -> int64 = <fun>|}];;
[@@@part "2"];;
let average x y =
  Int64.(x + y / of_int 2);;
[%%expect ocaml {|val average : int64 -> int64 -> int64 = <fun>|}];;
[@@@part "3"];;
module Interval = struct
  type t = | Interval of int * int
           | Empty

  let create low high =
    if high < low then Empty else Interval (low,high)
end;;
[%%expect ocaml {|
module Interval :
  sig type t = Interval of int * int | Empty val create : int -> int -> t end
|}];;
[@@@part "4"];;
module Extended_interval = struct
  include Interval

  let contains t x =
    match t with
    | Empty -> false
    | Interval (low,high) -> x >= low && x <= high
end;;
[%%expect ocaml {|
module Extended_interval :
  sig
    type t = Interval.t = Interval of int * int | Empty
    val create : int -> int -> t
    val contains : t -> int -> bool
  end
|}];;
Extended_interval.contains (Extended_interval.create 3 10) 4;;
[%%expect ocaml {|- : bool = true|}];;
[@@@part "5"];;
module Extended_interval = struct
  open Interval

  let contains t x =
    match t with
    | Empty -> false
    | Interval (low,high) -> x >= low && x <= high
end;;
[%%expect ocaml {|
module Extended_interval :
  sig val contains : Extended_interval.t -> int -> bool end
|}];;
Extended_interval.contains (Extended_interval.create 3 10) 4;;
[%%expect{|
Characters 28-52:
Error: Unbound value Extended_interval.create
|}];;
