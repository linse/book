#silent true;;
#use "topfind";;
#thread;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
open Base;;
[@@@part "0.5"];;
type 'a expr =
  | Base  of 'a
  | Const of bool
  | And   of 'a expr list
  | Or    of 'a expr list
  | Not   of 'a expr
;;
[%%expect ocaml {|
type 'a expr =
    Base of 'a
  | Const of bool
  | And of 'a expr list
  | Or of 'a expr list
  | Not of 'a expr
|}];;
[@@@part "1"];;
type mail_field = To | From | CC | Date | Subject;;
[%%expect ocaml {|type mail_field = To | From | CC | Date | Subject|}];;
type mail_predicate = { field: mail_field;
                        contains: string }
;;
[%%expect ocaml {|type mail_predicate = { field : mail_field; contains : string; }|}];;
[@@@part "2"];;
let test field contains = Base { field; contains };;
[%%expect ocaml {|val test : mail_field -> string -> mail_predicate expr = <fun>|}];;
And [ Or [ test To "doligez"; test CC "doligez" ];
      test Subject "runtime";
    ]
;;
[%%expect ocaml {|
- : mail_predicate expr =
And
 [Or
   [Base {field = To; contains = "doligez"};
    Base {field = CC; contains = "doligez"}];
  Base {field = Subject; contains = "runtime"}]
|}];;
[@@@part "3"];;
let rec eval expr base_eval =
  (* a shortcut, so we don't need to repeatedly pass [base_eval]
     explicitly to [eval] *)
  let eval' expr = eval expr base_eval in
  match expr with
  | Base  base  -> base_eval base
  | Const bool  -> bool
  | And   exprs -> List.for_all exprs ~f:eval'
  | Or    exprs -> List.exists  exprs ~f:eval'
  | Not   expr  -> not (eval' expr)
;;
[%%expect ocaml {|val eval : 'a expr -> ('a -> bool) -> bool = <fun>|}];;
[@@@part "4"];;
let and_ l =
  if List.exists l ~f:(function Const false -> true | _ -> false) 
  then Const false
  else
    match List.filter l ~f:(function Const true -> false | _ -> true) with
    | [] -> Const true
    | [ x ] -> x
    | l -> And l
;;
[%%expect ocaml {|val and_ : 'a expr list -> 'a expr = <fun>|}];;
let or_ l =
  if List.exists l ~f:(function Const true -> true | _ -> false) then Const true
  else
    match List.filter l ~f:(function Const false -> false | _ -> true) with
    | [] -> Const false
    | [x] -> x
    | l -> Or l
;;
[%%expect ocaml {|val or_ : 'a expr list -> 'a expr = <fun>|}];;
let not_ = function
  | Const b -> Const (not b)
  | e -> Not e
;;
[%%expect ocaml {|val not_ : 'a expr -> 'a expr = <fun>|}];;
[@@@part "5"];;
let rec simplify = function
  | Base _ | Const _ as x -> x
  | And l -> and_ (List.map ~f:simplify l)
  | Or l  -> or_  (List.map ~f:simplify l)
  | Not e -> not_ (simplify e)
;;
[%%expect ocaml {|val simplify : 'a expr -> 'a expr = <fun>|}];;
[@@@part "6"];;
simplify (Not (And [ Or [Base "it's snowing"; Const true];
                     Base "it's raining"]));;
[%%expect ocaml {|- : string expr = Not (Base "it's raining")|}];;
[@@@part "7"];;
simplify (Not (And [ Or [Base "it's snowing"; Const true];
                     Not (Not (Base "it's raining"))]));;
[%%expect ocaml {|- : string expr = Not (Not (Not (Base "it's raining")))|}];;
[@@@part "8"];;
let not_ = function
  | Const b -> Const (not b)
  | (Base _ | And _ | Or _ | Not _) as e -> Not e
;;
[%%expect ocaml {|val not_ : 'a expr -> 'a expr = <fun>|}];;
[@@@part "9"];;
let not_ = function
  | Const b -> Const (not b)
  | Not e -> e
  | (Base _ | And _ | Or _ ) as e -> Not e
;;
[%%expect ocaml {|val not_ : 'a expr -> 'a expr = <fun>|}];;
